Git Commands
git remote (list out the current remotes, Options -v verbose)
	git remote add <remote-name> <url>
git push <remote-name> <branch-name>
git pull <remote-name> <branch-name>
git merge master origin/master (same as running git pull abd git merge one after the other)


When would you want to use a remote repository rather than keeping all your work
local?

    A remote repo can be used to collaborate with other workers on a project. It can also be used by you to continue working even when     you don't have access to your machine.  

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    The remote repo might be modified by different people. It would thus not not be desirable to have each such update reflect on the local copy of your code.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork - Creates a copy of a repo in your GitHub account, so you can make changes to it when you don't have permission to modify the original repo(Link :GitHub -> GitHub)
    Clones - Creates a local copy of a given GitHub repo, so you can work locally (Link: GitHub/Local -> Local)
    Branches - Creates a new 'branch' within the local repo, so you can start working on a new feature, bug fix etc (Link: Local -> Local) 


What is the benefit of having a copy of the last known state of the remote
stored locally?

In situations where you know that you won't have internet access for a while, you can update to the most recent copy of the code from the remote. So you can update the remote at a later point.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

A way to go about it would be to keep the latest version of the code on a shared drive on the network, we would just need to copy to the shared. However, collaborating with others, merging code, keeping a track on what has changed with each version and reverting to an older version would not be possible without git and github

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Whenever we want to try out any experimental feature without breaking the "main" code, its preferable to branch off and merge only when the feature is stable.
